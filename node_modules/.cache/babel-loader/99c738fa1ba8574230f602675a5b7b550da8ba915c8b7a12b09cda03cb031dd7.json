{"ast":null,"code":"import { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { Chart, registerables } from 'chart.js';\nexport default {\n  name: 'ProgressDashboard',\n  data() {\n    return {\n      activeMainTab: 'projects',\n      darkMode: false,\n      // Added darkMode variable\n      sidebarCollapsed: false,\n      // Added for compatibility with logo\n      mainTabs: [{\n        id: 'projects',\n        label: 'Projects'\n      }, {\n        id: 'skills',\n        label: 'Skills'\n      }, {\n        id: 'objectives',\n        label: 'Objectives'\n      }, {\n        id: 'activities',\n        label: 'Activities'\n      }],\n      projectsChartType: 'completion',\n      projectsChartOptions: [{\n        value: 'completion',\n        label: 'Completion Status'\n      }, {\n        value: 'technologies',\n        label: 'Technologies Used'\n      }, {\n        value: 'timeline',\n        label: 'Timeline View'\n      }, {\n        value: 'progress',\n        label: 'Progress Bars'\n      }],\n      skillsChartType: 'radar',\n      skillsChartOptions: [{\n        value: 'radar',\n        label: 'Radar Chart'\n      }, {\n        value: 'progress',\n        label: 'Progress Bars'\n      }, {\n        value: 'doughnut',\n        label: 'Categories Doughnut'\n      }],\n      objectivesChartType: 'completion',\n      objectivesChartOptions: [{\n        value: 'completion',\n        label: 'Completion Status'\n      }, {\n        value: 'progress',\n        label: 'Progress Bars'\n      }, {\n        value: 'timeline',\n        label: 'Timeline View'\n      }],\n      activitiesChartType: 'bar',\n      activitiesChartOptions: [{\n        value: 'bar',\n        label: 'Activities by Type'\n      }, {\n        value: 'pie',\n        label: 'Activities Distribution'\n      }, {\n        value: 'calendar',\n        label: 'Calendar Heatmap'\n      }],\n      timeRange: 'all',\n      projects: [],\n      skills: [],\n      objectives: [],\n      activities: [],\n      charts: {}\n    };\n  },\n  computed: {\n    filteredProjects() {\n      return this.filterByDateRange(this.projects, 'startDate');\n    },\n    filteredSkills() {\n      return this.skills; // Skills don't typically have dates\n    },\n    filteredObjectives() {\n      return this.filterByDateRange(this.objectives, 'startDate');\n    },\n    filteredActivities() {\n      return this.filterByDateRange(this.activities, 'date');\n    },\n    sortedProjects() {\n      return [...this.filteredProjects].sort((a, b) => new Date(a.startDate) - new Date(b.startDate));\n    },\n    sortedObjectives() {\n      return [...this.filteredObjectives].sort((a, b) => new Date(a.startDate) - new Date(b.startDate));\n    },\n    technologyUsage() {\n      const techMap = {};\n      this.filteredProjects.forEach(project => {\n        (project.technologies || []).forEach(tech => {\n          techMap[tech] = (techMap[tech] || 0) + 1;\n        });\n      });\n      return techMap;\n    },\n    topTechnologies() {\n      return Object.entries(this.technologyUsage).map(([name, count]) => ({\n        name,\n        count\n      })).sort((a, b) => b.count - a.count);\n    },\n    skillCategories() {\n      const categories = {};\n      this.filteredSkills.forEach(skill => {\n        if (!categories[skill.category]) {\n          categories[skill.category] = 0;\n        }\n        categories[skill.category]++;\n      });\n      return categories;\n    },\n    activityTypes() {\n      const types = {};\n      this.filteredActivities.forEach(activity => {\n        if (!types[activity.type]) {\n          types[activity.type] = 0;\n        }\n        types[activity.type]++;\n      });\n      return types;\n    }\n  },\n  methods: {\n    toggleTheme() {\n      this.darkMode = !this.darkMode;\n      localStorage.setItem('darkMode', this.darkMode);\n    },\n    async loadData() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (!user) return;\n      const db = getFirestore();\n      try {\n        // Load projects\n        const projectsQuery = query(collection(db, 'users', user.uid, 'projects'));\n        const projectsSnapshot = await getDocs(projectsQuery);\n        this.projects = projectsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        // Load skills\n        const skillsQuery = query(collection(db, 'users', user.uid, 'skills'));\n        const skillsSnapshot = await getDocs(skillsQuery);\n        this.skills = skillsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        // Load objectives\n        const objectivesQuery = query(collection(db, 'users', user.uid, 'objectives'));\n        const objectivesSnapshot = await getDocs(objectivesQuery);\n        this.objectives = objectivesSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        // Load activities\n        const activitiesQuery = query(collection(db, 'users', user.uid, 'activities'));\n        const activitiesSnapshot = await getDocs(activitiesQuery);\n        this.activities = activitiesSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        // Initialize charts after data is loaded\n        this.$nextTick(() => {\n          this.initCharts();\n        });\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    },\n    filterByDateRange(items, dateField) {\n      if (this.timeRange === 'all') return items;\n      const now = new Date();\n      let cutoffDate = new Date();\n      switch (this.timeRange) {\n        case 'year':\n          cutoffDate.setFullYear(now.getFullYear() - 1);\n          break;\n        case 'month':\n          cutoffDate.setMonth(now.getMonth() - 1);\n          break;\n        case 'week':\n          cutoffDate.setDate(now.getDate() - 7);\n          break;\n      }\n      return items.filter(item => {\n        const itemDate = new Date(item[dateField] || 0);\n        return itemDate >= cutoffDate;\n      });\n    },\n    getProjectProgress(project) {\n      if (project.status === 'completed') return 100;\n      if (project.status === 'in-progress' && project.progress) return project.progress;\n      if (project.status === 'planning') return 0;\n      if (project.status === 'on-hold') return 50;\n      return 0;\n    },\n    getObjectiveStatus(objective, formatted = false) {\n      if (objective.progress >= 100) return formatted ? 'Completed' : 'completed';\n      if (objective.progress > 0) return formatted ? 'In Progress' : 'in-progress';\n      return formatted ? 'Not Started' : 'not-started';\n    },\n    getTimelinePosition(dateString) {\n      if (!dateString) return 0;\n      const items = this.activeMainTab === 'projects' ? this.projects : this.activeMainTab === 'objectives' ? this.objectives : this.activities;\n      const dates = items.map(item => item.startDate || item.date ? new Date(item.startDate || item.date) : null).filter(d => d);\n      if (dates.length === 0) return 50;\n      const minDate = new Date(Math.min(...dates));\n      const maxDate = new Date(Math.max(...dates));\n      if (minDate.getTime() === maxDate.getTime()) return 50;\n      const currentDate = new Date(dateString);\n      const totalRange = maxDate - minDate;\n      const positionFromStart = currentDate - minDate;\n      return positionFromStart / totalRange * 100;\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const options = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      };\n      return new Date(dateString).toLocaleDateString('en-US', options);\n    },\n    formatStatus(status) {\n      const statusMap = {\n        'planning': 'Planning',\n        'in-progress': 'In Progress',\n        'completed': 'Completed',\n        'on-hold': 'On Hold',\n        'not-started': 'Not Started'\n      };\n      return statusMap[status] || status;\n    },\n    initCharts() {\n      Chart.register(...registerables);\n\n      // Destroy existing charts\n      Object.values(this.charts).forEach(chart => {\n        if (chart) chart.destroy();\n      });\n      this.charts = {};\n\n      // Initialize charts based on active tab and chart type\n      if (this.activeMainTab === 'projects') {\n        if (this.projectsChartType === 'completion') {\n          this.initCompletionChart();\n        } else if (this.projectsChartType === 'technologies') {\n          this.initTechnologiesChart();\n        }\n      } else if (this.activeMainTab === 'skills') {\n        if (this.skillsChartType === 'radar') {\n          this.initSkillsRadarChart();\n        } else if (this.skillsChartType === 'doughnut') {\n          this.initSkillsDoughnutChart();\n        }\n      } else if (this.activeMainTab === 'objectives') {\n        if (this.objectivesChartType === 'completion') {\n          this.initObjectivesCompletionChart();\n        }\n      } else if (this.activeMainTab === 'activities') {\n        if (this.activitiesChartType === 'bar') {\n          this.initActivitiesBarChart();\n        } else if (this.activitiesChartType === 'pie') {\n          this.initActivitiesPieChart();\n        }\n      }\n    },\n    initCompletionChart() {\n      if (!this.$refs.completionChart) return;\n      const ctx = this.$refs.completionChart.getContext('2d');\n      const statusCounts = {\n        planning: 0,\n        'in-progress': 0,\n        completed: 0,\n        'on-hold': 0\n      };\n      this.filteredProjects.forEach(project => {\n        statusCounts[project.status]++;\n      });\n      this.charts.completion = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Planning', 'In Progress', 'Completed', 'On Hold'],\n          datasets: [{\n            data: Object.values(statusCounts),\n            backgroundColor: ['#f39c12', '#3498db', '#2ecc71', '#95a5a6'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `${context.label}: ${context.raw} projects`;\n                }\n              }\n            }\n          }\n        }\n      });\n    },\n    initTechnologiesChart() {\n      if (!this.$refs.technologiesChart) return;\n      const ctx = this.$refs.technologiesChart.getContext('2d');\n      const topTechs = this.topTechnologies.slice(0, 10);\n      this.charts.technologies = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: topTechs.map(tech => tech.name),\n          datasets: [{\n            label: 'Projects using this technology',\n            data: topTechs.map(tech => tech.count),\n            backgroundColor: 'rgba(54, 162, 235, 0.7)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1,\n                color: this.darkMode ? '#fff' : '#1e293b'\n              },\n              grid: {\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n              }\n            },\n            x: {\n              ticks: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              },\n              grid: {\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    },\n    initSkillsRadarChart() {\n      if (!this.$refs.skillsRadarChart) return;\n      const ctx = this.$refs.skillsRadarChart.getContext('2d');\n      const categories = Object.keys(this.skillCategories);\n      const categoryAverages = categories.map(category => {\n        const categorySkills = this.skills.filter(skill => skill.category === category);\n        const average = categorySkills.reduce((sum, skill) => sum + skill.level, 0) / categorySkills.length;\n        return Math.round(average * 10) / 10;\n      });\n      this.charts.skillsRadar = new Chart(ctx, {\n        type: 'radar',\n        data: {\n          labels: categories,\n          datasets: [{\n            label: 'Average Skill Level',\n            data: categoryAverages,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 2,\n            pointBackgroundColor: 'rgba(54, 162, 235, 1)'\n          }]\n        },\n        options: {\n          scales: {\n            r: {\n              angleLines: {\n                display: true,\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'\n              },\n              suggestedMin: 0,\n              suggestedMax: 10,\n              ticks: {\n                stepSize: 2,\n                color: this.darkMode ? '#fff' : '#1e293b'\n              },\n              grid: {\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n              },\n              pointLabels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `Average: ${context.raw}/10`;\n                }\n              }\n            },\n            legend: {\n              labels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            }\n          }\n        }\n      });\n    },\n    initSkillsDoughnutChart() {\n      if (!this.$refs.skillsDoughnutChart) return;\n      const ctx = this.$refs.skillsDoughnutChart.getContext('2d');\n      const categories = Object.entries(this.skillCategories);\n\n      // Generate distinct colors for each category\n      const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#8AC24A', '#FF5A5F', '#7B68EE', '#20B2AA'];\n      this.charts.skillsDoughnut = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: categories.map(([name]) => name),\n          datasets: [{\n            data: categories.map(([, count]) => count),\n            backgroundColor: categories.map((_, i) => colors[i % colors.length]),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `${context.label}: ${context.raw} skills`;\n                }\n              }\n            }\n          }\n        }\n      });\n    },\n    initObjectivesCompletionChart() {\n      if (!this.$refs.objectivesCompletionChart) return;\n      const ctx = this.$refs.objectivesCompletionChart.getContext('2d');\n      const statusCounts = {\n        'not-started': 0,\n        'in-progress': 0,\n        'completed': 0\n      };\n      this.filteredObjectives.forEach(obj => {\n        statusCounts[this.getObjectiveStatus(obj, false)]++;\n      });\n      this.charts.objectivesCompletion = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: ['Not Started', 'In Progress', 'Completed'],\n          datasets: [{\n            data: Object.values(statusCounts),\n            backgroundColor: ['#e0e0e0', '#3498db', '#2ecc71'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `${context.label}: ${context.raw} objectives`;\n                }\n              }\n            }\n          }\n        }\n      });\n    },\n    initActivitiesBarChart() {\n      if (!this.$refs.activitiesBarChart) return;\n      const ctx = this.$refs.activitiesBarChart.getContext('2d');\n      const activityTypes = Object.entries(this.activityTypes);\n      this.charts.activitiesBar = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: activityTypes.map(([name]) => name),\n          datasets: [{\n            label: 'Number of Activities',\n            data: activityTypes.map(([, count]) => count),\n            backgroundColor: 'rgba(75, 192, 192, 0.7)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1,\n                color: this.darkMode ? '#fff' : '#1e293b'\n              },\n              grid: {\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n              }\n            },\n            x: {\n              ticks: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              },\n              grid: {\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    },\n    initActivitiesPieChart() {\n      if (!this.$refs.activitiesPieChart) return;\n      const ctx = this.$refs.activitiesPieChart.getContext('2d');\n      const activityTypes = Object.entries(this.activityTypes);\n\n      // Generate distinct colors for each activity type\n      const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#8AC24A', '#FF5A5F', '#7B68EE', '#20B2AA'];\n      this.charts.activitiesPie = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: activityTypes.map(([name]) => name),\n          datasets: [{\n            data: activityTypes.map(([, count]) => count),\n            backgroundColor: activityTypes.map((_, i) => colors[i % colors.length]),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                color: this.darkMode ? '#fff' : '#1e293b'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `${context.label}: ${context.raw} activities`;\n                }\n              }\n            }\n          }\n        }\n      });\n    },\n    updateCharts() {\n      this.$nextTick(() => {\n        this.initCharts();\n      });\n    },\n    // Helper method to detect when chart type changes\n    watchChartTypeChange() {\n      this.$watch('projectsChartType', this.updateCharts);\n      this.$watch('skillsChartType', this.updateCharts);\n      this.$watch('objectivesChartType', this.updateCharts);\n      this.$watch('activitiesChartType', this.updateCharts);\n      this.$watch('activeMainTab', this.updateCharts);\n    }\n  },\n  mounted() {\n    // Register chart.js\n    Chart.register(...registerables);\n\n    // Load user data\n    this.loadData();\n\n    // Watch for chart type changes\n    this.watchChartTypeChange();\n\n    // Check for saved theme preference\n    const savedDarkMode = localStorage.getItem('darkMode');\n    if (savedDarkMode !== null) {\n      this.darkMode = savedDarkMode === 'true';\n    } else {\n      // Default to system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      this.darkMode = prefersDark;\n    }\n\n    // Listen for system theme changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n      if (localStorage.getItem('darkMode') === null) {\n        this.darkMode = e.matches;\n      }\n    });\n  }\n};","map":{"version":3,"names":["getFirestore","collection","getDocs","query","where","getAuth","Chart","registerables","name","data","activeMainTab","darkMode","sidebarCollapsed","mainTabs","id","label","projectsChartType","projectsChartOptions","value","skillsChartType","skillsChartOptions","objectivesChartType","objectivesChartOptions","activitiesChartType","activitiesChartOptions","timeRange","projects","skills","objectives","activities","charts","computed","filteredProjects","filterByDateRange","filteredSkills","filteredObjectives","filteredActivities","sortedProjects","sort","a","b","Date","startDate","sortedObjectives","technologyUsage","techMap","forEach","project","technologies","tech","topTechnologies","Object","entries","map","count","skillCategories","categories","skill","category","activityTypes","types","activity","type","methods","toggleTheme","localStorage","setItem","loadData","auth","user","currentUser","db","projectsQuery","uid","projectsSnapshot","docs","doc","skillsQuery","skillsSnapshot","objectivesQuery","objectivesSnapshot","activitiesQuery","activitiesSnapshot","$nextTick","initCharts","error","console","items","dateField","now","cutoffDate","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","filter","item","itemDate","getProjectProgress","status","progress","getObjectiveStatus","objective","formatted","getTimelinePosition","dateString","dates","date","d","length","minDate","Math","min","maxDate","max","getTime","currentDate","totalRange","positionFromStart","formatDate","options","year","month","day","toLocaleDateString","formatStatus","statusMap","register","values","chart","destroy","initCompletionChart","initTechnologiesChart","initSkillsRadarChart","initSkillsDoughnutChart","initObjectivesCompletionChart","initActivitiesBarChart","initActivitiesPieChart","$refs","completionChart","ctx","getContext","statusCounts","planning","completed","completion","labels","datasets","backgroundColor","borderWidth","responsive","plugins","legend","position","color","tooltip","callbacks","context","raw","technologiesChart","topTechs","slice","borderColor","scales","y","beginAtZero","ticks","stepSize","grid","x","display","skillsRadarChart","keys","categoryAverages","categorySkills","average","reduce","sum","level","round","skillsRadar","pointBackgroundColor","r","angleLines","suggestedMin","suggestedMax","pointLabels","skillsDoughnutChart","colors","skillsDoughnut","_","i","objectivesCompletionChart","obj","objectivesCompletion","activitiesBarChart","activitiesBar","activitiesPieChart","activitiesPie","updateCharts","watchChartTypeChange","$watch","mounted","savedDarkMode","getItem","prefersDark","window","matchMedia","matches","addEventListener","e"],"sources":["/workspaces/JAVASCRIPT-S4/src/views/time.vue"],"sourcesContent":["<template>\r\n  <div class=\"timeline-dashboard\" :class=\"{ 'dark-mode': darkMode }\">\r\n    <!-- Dashboard Header -->\r\n    <div class=\"dashboard-header\">\r\n      <h2 class=\"logo-container\"><img src=\"/logoDev.jpg\" alt=\"logo\"></h2>\r\n      <h1>My Progress Dashboard</h1>\r\n      <p>Visualize your progress across different dimensions</p>\r\n       <router-link to=\"/dash\" class=\"return-to-dash\">\r\n      ← Return to Main Dashboard\r\n    </router-link>\r\n\r\n    </div>\r\n\r\n    <!-- Main Tabs -->\r\n    <div class=\"main-tabs\">\r\n      <button \r\n        v-for=\"tab in mainTabs\" \r\n        :key=\"tab.id\"\r\n        @click=\"activeMainTab = tab.id\"\r\n        :class=\"{ active: activeMainTab === tab.id }\"\r\n      >\r\n        {{ tab.label }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Projects Section -->\r\n    <div v-if=\"activeMainTab === 'projects'\" class=\"section-container\">\r\n      <div class=\"chart-selector\">\r\n        <h2>Projects Visualization</h2>\r\n        <select v-model=\"projectsChartType\" class=\"chart-type-selector\">\r\n          <option v-for=\"option in projectsChartOptions\" :key=\"option.value\" :value=\"option.value\">\r\n            {{ option.label }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Completion Percentage Chart -->\r\n      <div v-if=\"projectsChartType === 'completion'\" class=\"chart-container\">\r\n        <h3>Projects Completion Status</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"completionChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Technologies Usage Chart -->\r\n      <div v-if=\"projectsChartType === 'technologies'\" class=\"chart-container\">\r\n        <h3>Technologies Usage</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"technologiesChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Timeline Chart -->\r\n      <div v-if=\"projectsChartType === 'timeline'\" class=\"chart-container\">\r\n        <h3>Projects Timeline</h3>\r\n        <div class=\"timeline-wrapper\">\r\n          <div class=\"timeline-line\"></div>\r\n          <div \r\n            v-for=\"project in sortedProjects\" \r\n            :key=\"project.id\"\r\n            class=\"timeline-item\"\r\n            :class=\"project.status\"\r\n            :style=\"{ left: `${getTimelinePosition(project.startDate)}%` }\"\r\n          >\r\n            <div class=\"timeline-dot\"></div>\r\n            <div class=\"timeline-content\">\r\n              <div class=\"timeline-date\">{{ formatDate(project.startDate) }}</div>\r\n              <div class=\"timeline-title\">{{ project.name }}</div>\r\n              <div class=\"timeline-progress\">\r\n                <div class=\"progress-bar\" :style=\"{ width: `${getProjectProgress(project)}%` }\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Progress Bars Chart -->\r\n      <div v-if=\"projectsChartType === 'progress'\" class=\"chart-container\">\r\n        <h3>Projects Progress</h3>\r\n        <div class=\"progress-bars\">\r\n          <div \r\n            v-for=\"project in filteredProjects\" \r\n            :key=\"project.id\"\r\n            class=\"progress-bar-item\"\r\n          >\r\n            <div class=\"project-info\">\r\n              <span class=\"project-name\">{{ project.name }}</span>\r\n              <span class=\"project-status\" :class=\"project.status\">{{ formatStatus(project.status) }}</span>\r\n            </div>\r\n            <div class=\"progress-container\">\r\n              <div \r\n                class=\"progress-bar\"\r\n                :style=\"{ width: `${getProjectProgress(project)}%` }\"\r\n                :class=\"project.status\"\r\n              ></div>\r\n              <span class=\"progress-percent\">{{ getProjectProgress(project) }}%</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Skills Section -->\r\n    <div v-if=\"activeMainTab === 'skills'\" class=\"section-container\">\r\n      <div class=\"chart-selector\">\r\n        <h2>Skills Visualization</h2>\r\n        <select v-model=\"skillsChartType\" class=\"chart-type-selector\">\r\n          <option v-for=\"option in skillsChartOptions\" :key=\"option.value\" :value=\"option.value\">\r\n            {{ option.label }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Radar Chart -->\r\n      <div v-if=\"skillsChartType === 'radar'\" class=\"chart-container\">\r\n        <h3>Skills Radar Chart</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"skillsRadarChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Progress Bars -->\r\n      <div v-if=\"skillsChartType === 'progress'\" class=\"chart-container\">\r\n        <h3>Skills Progress</h3>\r\n        <div class=\"progress-bars\">\r\n          <div \r\n            v-for=\"skill in filteredSkills\" \r\n            :key=\"skill.id\"\r\n            class=\"progress-bar-item\"\r\n          >\r\n            <div class=\"skill-info\">\r\n              <span class=\"skill-name\">{{ skill.name }}</span>\r\n              <span class=\"skill-category\">{{ skill.category }}</span>\r\n            </div>\r\n            <div class=\"progress-container\">\r\n              <div \r\n                class=\"progress-bar\"\r\n                :style=\"{ width: `${skill.level * 10}%` }\"\r\n              ></div>\r\n              <span class=\"progress-percent\">Level {{ skill.level }}/10</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Doughnut Chart -->\r\n      <div v-if=\"skillsChartType === 'doughnut'\" class=\"chart-container\">\r\n        <h3>Skills by Category</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"skillsDoughnutChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Objectives Section -->\r\n    <div v-if=\"activeMainTab === 'objectives'\" class=\"section-container\">\r\n      <div class=\"chart-selector\">\r\n        <h2>Objectives Visualization</h2>\r\n        <select v-model=\"objectivesChartType\" class=\"chart-type-selector\">\r\n          <option v-for=\"option in objectivesChartOptions\" :key=\"option.value\" :value=\"option.value\">\r\n            {{ option.label }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Completion Chart -->\r\n      <div v-if=\"objectivesChartType === 'completion'\" class=\"chart-container\">\r\n        <h3>Objectives Completion</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"objectivesCompletionChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Progress Bars -->\r\n      <div v-if=\"objectivesChartType === 'progress'\" class=\"chart-container\">\r\n        <h3>Objectives Progress</h3>\r\n        <div class=\"progress-bars\">\r\n          <div \r\n            v-for=\"objective in filteredObjectives\" \r\n            :key=\"objective.id\"\r\n            class=\"progress-bar-item\"\r\n          >\r\n            <div class=\"objective-info\">\r\n              <span class=\"objective-name\">{{ objective.title }}</span>\r\n              <span class=\"objective-status\">{{ getObjectiveStatus(objective) }}</span>\r\n            </div>\r\n            <div class=\"progress-container\">\r\n              <div \r\n                class=\"progress-bar\"\r\n                :style=\"{ width: `${objective.progress || 0}%` }\"\r\n                :class=\"getObjectiveStatus(objective, false)\"\r\n              ></div>\r\n              <span class=\"progress-percent\">{{ objective.progress || 0 }}%</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Timeline Chart -->\r\n      <div v-if=\"objectivesChartType === 'timeline'\" class=\"chart-container\">\r\n        <h3>Objectives Timeline</h3>\r\n        <div class=\"timeline-wrapper\">\r\n          <div class=\"timeline-line\"></div>\r\n          <div \r\n            v-for=\"objective in sortedObjectives\" \r\n            :key=\"objective.id\"\r\n            class=\"timeline-item\"\r\n            :class=\"getObjectiveStatus(objective, false)\"\r\n            :style=\"{ left: `${getTimelinePosition(objective.startDate)}%` }\"\r\n          >\r\n            <div class=\"timeline-dot\"></div>\r\n            <div class=\"timeline-content\">\r\n              <div class=\"timeline-date\">{{ formatDate(objective.startDate) }}</div>\r\n              <div class=\"timeline-title\">{{ objective.title }}</div>\r\n              <div class=\"timeline-progress\">\r\n                <div class=\"progress-bar\" :style=\"{ width: `${objective.progress || 0}%` }\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Activities Section -->\r\n    <div v-if=\"activeMainTab === 'activities'\" class=\"section-container\">\r\n      <div class=\"chart-selector\">\r\n        <h2>Activities Visualization</h2>\r\n        <select v-model=\"activitiesChartType\" class=\"chart-type-selector\">\r\n          <option v-for=\"option in activitiesChartOptions\" :key=\"option.value\" :value=\"option.value\">\r\n            {{ option.label }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Bar Chart -->\r\n      <div v-if=\"activitiesChartType === 'bar'\" class=\"chart-container\">\r\n        <h3>Activities by Type</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"activitiesBarChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Pie Chart -->\r\n      <div v-if=\"activitiesChartType === 'pie'\" class=\"chart-container\">\r\n        <h3>Activities Distribution</h3>\r\n        <div class=\"chart-wrapper\">\r\n          <canvas ref=\"activitiesPieChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Calendar Heatmap -->\r\n      <div v-if=\"activitiesChartType === 'calendar'\" class=\"chart-container\">\r\n        <h3>Activity Calendar</h3>\r\n        <div class=\"calendar-heatmap\">\r\n          <!-- This would be implemented with a heatmap library in a real app -->\r\n          <div class=\"heatmap-placeholder\">\r\n            <p>Activity heatmap would be displayed here</p>\r\n            <p>Showing frequency of activities over time</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Time Range Selector -->\r\n    <div class=\"time-range-selector\">\r\n      <label>Time Range:</label>\r\n      <select v-model=\"timeRange\" @change=\"updateCharts\">\r\n        <option value=\"all\">All Time</option>\r\n        <option value=\"year\">Last Year</option>\r\n        <option value=\"month\">Last Month</option>\r\n        <option value=\"week\">Last Week</option>\r\n      </select>\r\n    </div>\r\n    \r\n    <!-- Theme Toggle Button -->\r\n    <div class=\"theme-toggle-container\">\r\n      <button class=\"theme-toggle\" @click=\"toggleTheme\">\r\n        <i :class=\"darkMode ? 'fas fa-sun' : 'fas fa-moon'\"></i>\r\n        <span>{{ darkMode ? 'Light Mode' : 'Dark Mode' }}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nexport default {\r\n  name: 'ProgressDashboard',\r\n  data() {\r\n    return {\r\n      activeMainTab: 'projects',\r\n      darkMode: false, // Added darkMode variable\r\n      sidebarCollapsed: false, // Added for compatibility with logo\r\n      mainTabs: [\r\n        { id: 'projects', label: 'Projects' },\r\n        { id: 'skills', label: 'Skills' },\r\n        { id: 'objectives', label: 'Objectives' },\r\n        { id: 'activities', label: 'Activities' }\r\n      ],\r\n      projectsChartType: 'completion',\r\n      projectsChartOptions: [\r\n        { value: 'completion', label: 'Completion Status' },\r\n        { value: 'technologies', label: 'Technologies Used' },\r\n        { value: 'timeline', label: 'Timeline View' },\r\n        { value: 'progress', label: 'Progress Bars' }\r\n      ],\r\n      skillsChartType: 'radar',\r\n      skillsChartOptions: [\r\n        { value: 'radar', label: 'Radar Chart' },\r\n        { value: 'progress', label: 'Progress Bars' },\r\n        { value: 'doughnut', label: 'Categories Doughnut' }\r\n      ],\r\n      objectivesChartType: 'completion',\r\n      objectivesChartOptions: [\r\n        { value: 'completion', label: 'Completion Status' },\r\n        { value: 'progress', label: 'Progress Bars' },\r\n        { value: 'timeline', label: 'Timeline View' }\r\n      ],\r\n      activitiesChartType: 'bar',\r\n      activitiesChartOptions: [\r\n        { value: 'bar', label: 'Activities by Type' },\r\n        { value: 'pie', label: 'Activities Distribution' },\r\n        { value: 'calendar', label: 'Calendar Heatmap' }\r\n      ],\r\n      timeRange: 'all',\r\n      projects: [],\r\n      skills: [],\r\n      objectives: [],\r\n      activities: [],\r\n      charts: {}\r\n    };\r\n  },\r\n  computed: {\r\n    filteredProjects() {\r\n      return this.filterByDateRange(this.projects, 'startDate');\r\n    },\r\n    filteredSkills() {\r\n      return this.skills; // Skills don't typically have dates\r\n    },\r\n    filteredObjectives() {\r\n      return this.filterByDateRange(this.objectives, 'startDate');\r\n    },\r\n    filteredActivities() {\r\n      return this.filterByDateRange(this.activities, 'date');\r\n    },\r\n    sortedProjects() {\r\n      return [...this.filteredProjects].sort((a, b) => \r\n        new Date(a.startDate) - new Date(b.startDate)\r\n      );\r\n    },\r\n    sortedObjectives() {\r\n      return [...this.filteredObjectives].sort((a, b) => \r\n        new Date(a.startDate) - new Date(b.startDate)\r\n      );\r\n    },\r\n    technologyUsage() {\r\n      const techMap = {};\r\n      this.filteredProjects.forEach(project => {\r\n        (project.technologies || []).forEach(tech => {\r\n          techMap[tech] = (techMap[tech] || 0) + 1;\r\n        });\r\n      });\r\n      return techMap;\r\n    },\r\n    topTechnologies() {\r\n      return Object.entries(this.technologyUsage)\r\n        .map(([name, count]) => ({ name, count }))\r\n        .sort((a, b) => b.count - a.count);\r\n    },\r\n    skillCategories() {\r\n      const categories = {};\r\n      this.filteredSkills.forEach(skill => {\r\n        if (!categories[skill.category]) {\r\n          categories[skill.category] = 0;\r\n        }\r\n        categories[skill.category]++;\r\n      });\r\n      return categories;\r\n    },\r\n    activityTypes() {\r\n      const types = {};\r\n      this.filteredActivities.forEach(activity => {\r\n        if (!types[activity.type]) {\r\n          types[activity.type] = 0;\r\n        }\r\n        types[activity.type]++;\r\n      });\r\n      return types;\r\n    }\r\n  },\r\n  methods: {\r\n    toggleTheme() {\r\n      this.darkMode = !this.darkMode;\r\n      localStorage.setItem('darkMode', this.darkMode);\r\n    },\r\n    async loadData() {\r\n      const auth = getAuth();\r\n      const user = auth.currentUser;\r\n      if (!user) return;\r\n\r\n      const db = getFirestore();\r\n      \r\n      try {\r\n        // Load projects\r\n        const projectsQuery = query(collection(db, 'users', user.uid, 'projects'));\r\n        const projectsSnapshot = await getDocs(projectsQuery);\r\n        this.projects = projectsSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n\r\n        // Load skills\r\n        const skillsQuery = query(collection(db, 'users', user.uid, 'skills'));\r\n        const skillsSnapshot = await getDocs(skillsQuery);\r\n        this.skills = skillsSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n\r\n        // Load objectives\r\n        const objectivesQuery = query(collection(db, 'users', user.uid, 'objectives'));\r\n        const objectivesSnapshot = await getDocs(objectivesQuery);\r\n        this.objectives = objectivesSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n\r\n        // Load activities\r\n        const activitiesQuery = query(collection(db, 'users', user.uid, 'activities'));\r\n        const activitiesSnapshot = await getDocs(activitiesQuery);\r\n        this.activities = activitiesSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n\r\n        // Initialize charts after data is loaded\r\n        this.$nextTick(() => {\r\n          this.initCharts();\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n      }\r\n    },\r\n    filterByDateRange(items, dateField) {\r\n      if (this.timeRange === 'all') return items;\r\n      \r\n      const now = new Date();\r\n      let cutoffDate = new Date();\r\n      \r\n      switch(this.timeRange) {\r\n        case 'year':\r\n          cutoffDate.setFullYear(now.getFullYear() - 1);\r\n          break;\r\n        case 'month':\r\n          cutoffDate.setMonth(now.getMonth() - 1);\r\n          break;\r\n        case 'week':\r\n          cutoffDate.setDate(now.getDate() - 7);\r\n          break;\r\n      }\r\n      \r\n      return items.filter(item => {\r\n        const itemDate = new Date(item[dateField] || 0);\r\n        return itemDate >= cutoffDate;\r\n      });\r\n    },\r\n    getProjectProgress(project) {\r\n      if (project.status === 'completed') return 100;\r\n      if (project.status === 'in-progress' && project.progress) return project.progress;\r\n      if (project.status === 'planning') return 0;\r\n      if (project.status === 'on-hold') return 50;\r\n      return 0;\r\n    },\r\n    getObjectiveStatus(objective, formatted = false) {\r\n      if (objective.progress >= 100) return formatted ? 'Completed' : 'completed';\r\n      if (objective.progress > 0) return formatted ? 'In Progress' : 'in-progress';\r\n      return formatted ? 'Not Started' : 'not-started';\r\n    },\r\n    getTimelinePosition(dateString) {\r\n      if (!dateString) return 0;\r\n      \r\n      const items = this.activeMainTab === 'projects' ? this.projects : \r\n                   this.activeMainTab === 'objectives' ? this.objectives : \r\n                   this.activities;\r\n      \r\n      const dates = items\r\n        .map(item => item.startDate || item.date ? new Date(item.startDate || item.date) : null)\r\n        .filter(d => d);\r\n      \r\n      if (dates.length === 0) return 50;\r\n      \r\n      const minDate = new Date(Math.min(...dates));\r\n      const maxDate = new Date(Math.max(...dates));\r\n      \r\n      if (minDate.getTime() === maxDate.getTime()) return 50;\r\n      \r\n      const currentDate = new Date(dateString);\r\n      const totalRange = maxDate - minDate;\r\n      const positionFromStart = currentDate - minDate;\r\n      \r\n      return (positionFromStart / totalRange) * 100;\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A';\r\n      const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n      return new Date(dateString).toLocaleDateString('en-US', options);\r\n    },\r\n    formatStatus(status) {\r\n      const statusMap = {\r\n        'planning': 'Planning',\r\n        'in-progress': 'In Progress',\r\n        'completed': 'Completed',\r\n        'on-hold': 'On Hold',\r\n        'not-started': 'Not Started'\r\n      };\r\n      return statusMap[status] || status;\r\n    },\r\n    initCharts() {\r\n      Chart.register(...registerables);\r\n      \r\n      // Destroy existing charts\r\n      Object.values(this.charts).forEach(chart => {\r\n        if (chart) chart.destroy();\r\n      });\r\n      this.charts = {};\r\n\r\n      // Initialize charts based on active tab and chart type\r\n      if (this.activeMainTab === 'projects') {\r\n        if (this.projectsChartType === 'completion') {\r\n          this.initCompletionChart();\r\n        } else if (this.projectsChartType === 'technologies') {\r\n          this.initTechnologiesChart();\r\n        }\r\n      } else if (this.activeMainTab === 'skills') {\r\n        if (this.skillsChartType === 'radar') {\r\n          this.initSkillsRadarChart();\r\n        } else if (this.skillsChartType === 'doughnut') {\r\n          this.initSkillsDoughnutChart();\r\n        }\r\n      } else if (this.activeMainTab === 'objectives') {\r\n        if (this.objectivesChartType === 'completion') {\r\n          this.initObjectivesCompletionChart();\r\n        }\r\n      } else if (this.activeMainTab === 'activities') {\r\n        if (this.activitiesChartType === 'bar') {\r\n          this.initActivitiesBarChart();\r\n        } else if (this.activitiesChartType === 'pie') {\r\n          this.initActivitiesPieChart();\r\n        }\r\n      }\r\n    },\r\n    initCompletionChart() {\r\n      if (!this.$refs.completionChart) return;\r\n      \r\n      const ctx = this.$refs.completionChart.getContext('2d');\r\n      \r\n      const statusCounts = {\r\n        planning: 0,\r\n        'in-progress': 0,\r\n        completed: 0,\r\n        'on-hold': 0\r\n      };\r\n      \r\n      this.filteredProjects.forEach(project => {\r\n        statusCounts[project.status]++;\r\n      });\r\n      \r\n      this.charts.completion = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Planning', 'In Progress', 'Completed', 'On Hold'],\r\n          datasets: [{\r\n            data: Object.values(statusCounts),\r\n            backgroundColor: [\r\n              '#f39c12',\r\n              '#3498db',\r\n              '#2ecc71',\r\n              '#95a5a6'\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              labels: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.label}: ${context.raw} projects`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    initTechnologiesChart() {\r\n      if (!this.$refs.technologiesChart) return;\r\n      \r\n      const ctx = this.$refs.technologiesChart.getContext('2d');\r\n      const topTechs = this.topTechnologies.slice(0, 10);\r\n      \r\n      this.charts.technologies = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: topTechs.map(tech => tech.name),\r\n          datasets: [{\r\n            label: 'Projects using this technology',\r\n            data: topTechs.map(tech => tech.count),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.7)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              ticks: {\r\n                stepSize: 1,\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              },\r\n              grid: {\r\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n              }\r\n            },\r\n            x: {\r\n              ticks: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              },\r\n              grid: {\r\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    initSkillsRadarChart() {\r\n      if (!this.$refs.skillsRadarChart) return;\r\n      \r\n      const ctx = this.$refs.skillsRadarChart.getContext('2d');\r\n      const categories = Object.keys(this.skillCategories);\r\n      const categoryAverages = categories.map(category => {\r\n        const categorySkills = this.skills.filter(skill => skill.category === category);\r\n        const average = categorySkills.reduce((sum, skill) => sum + skill.level, 0) / categorySkills.length;\r\n        return Math.round(average * 10) / 10;\r\n      });\r\n      \r\n      this.charts.skillsRadar = new Chart(ctx, {\r\n        type: 'radar',\r\n        data: {\r\n          labels: categories,\r\n          datasets: [{\r\n            label: 'Average Skill Level',\r\n            data: categoryAverages,\r\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 2,\r\n            pointBackgroundColor: 'rgba(54, 162, 235, 1)'\r\n          }]\r\n        },\r\n        options: {\r\n          scales: {\r\n            r: {\r\n              angleLines: {\r\n                display: true,\r\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'\r\n              },\r\n              suggestedMin: 0,\r\n              suggestedMax: 10,\r\n              ticks: {\r\n                stepSize: 2,\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              },\r\n              grid: {\r\n                color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n              },\r\n              pointLabels: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `Average: ${context.raw}/10`;\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              labels: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    initSkillsDoughnutChart() {\r\n      if (!this.$refs.skillsDoughnutChart) return;\r\n      \r\n      const ctx = this.$refs.skillsDoughnutChart.getContext('2d');\r\n      const categories = Object.entries(this.skillCategories);\r\n      \r\n      // Generate distinct colors for each category\r\n      const colors = [\r\n        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',\r\n        '#FF9F40', '#8AC24A', '#FF5A5F', '#7B68EE', '#20B2AA'\r\n      ];\r\n      \r\n      this.charts.skillsDoughnut = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: categories.map(([name]) => name),\r\n          datasets: [{\r\n            data: categories.map(([, count]) => count),\r\n            backgroundColor: categories.map((_, i) => colors[i % colors.length]),\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              labels: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.label}: ${context.raw} skills`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    initObjectivesCompletionChart() {\r\n      if (!this.$refs.objectivesCompletionChart) return;\r\n      \r\n      const ctx = this.$refs.objectivesCompletionChart.getContext('2d');\r\n      \r\n      const statusCounts = {\r\n        'not-started': 0,\r\n        'in-progress': 0,\r\n        'completed': 0\r\n      };\r\n      \r\n      this.filteredObjectives.forEach(obj => {\r\n        statusCounts[this.getObjectiveStatus(obj, false)]++;\r\n      });\r\n      \r\n      this.charts.objectivesCompletion = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: ['Not Started', 'In Progress', 'Completed'],\r\n          datasets: [{\r\n            data: Object.values(statusCounts),\r\n            backgroundColor: [\r\n              '#e0e0e0',\r\n              '#3498db',\r\n              '#2ecc71'\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right',\r\n              labels: {\r\n                color: this.darkMode ? '#fff' : '#1e293b'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.label}: ${context.raw} objectives`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    initActivitiesBarChart() {\r\n      if (!this.$refs.activitiesBarChart) return;\r\n      \r\n      const ctx = this.$refs.activitiesBarChart.getContext('2d');\r\n      const activityTypes = Object.entries(this.activityTypes);\r\n      \r\n      this.charts.activitiesBar = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: activityTypes.map(([name]) => name),\r\n          datasets: [{\r\n            label: 'Number of Activities',\r\n            data: activityTypes.map(([, count]) => count),\r\n            backgroundColor: 'rgba(75, 192, 192, 0.7)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n     options: {\r\n            responsive: true,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                ticks: {\r\n                  stepSize: 1,\r\n                  color: this.darkMode ? '#fff' : '#1e293b'\r\n                },\r\n                grid: {\r\n                  color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n                }\r\n              },\r\n              x: {\r\n                ticks: {\r\n                  color: this.darkMode ? '#fff' : '#1e293b'\r\n                },\r\n                grid: {\r\n                  color: this.darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\r\n                }\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              }\r\n            }\r\n          }\r\n        });\r\n      },\r\n      initActivitiesPieChart() {\r\n        if (!this.$refs.activitiesPieChart) return;\r\n        \r\n        const ctx = this.$refs.activitiesPieChart.getContext('2d');\r\n        const activityTypes = Object.entries(this.activityTypes);\r\n        \r\n        // Generate distinct colors for each activity type\r\n        const colors = [\r\n          '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',\r\n          '#FF9F40', '#8AC24A', '#FF5A5F', '#7B68EE', '#20B2AA'\r\n        ];\r\n        \r\n        this.charts.activitiesPie = new Chart(ctx, {\r\n          type: 'pie',\r\n          data: {\r\n            labels: activityTypes.map(([name]) => name),\r\n            datasets: [{\r\n              data: activityTypes.map(([, count]) => count),\r\n              backgroundColor: activityTypes.map((_, i) => colors[i % colors.length]),\r\n              borderWidth: 1\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            plugins: {\r\n              legend: {\r\n                position: 'right',\r\n                labels: {\r\n                  color: this.darkMode ? '#fff' : '#1e293b'\r\n                }\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `${context.label}: ${context.raw} activities`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      },\r\n      updateCharts() {\r\n        this.$nextTick(() => {\r\n          this.initCharts();\r\n        });\r\n      },\r\n      // Helper method to detect when chart type changes\r\n      watchChartTypeChange() {\r\n        this.$watch('projectsChartType', this.updateCharts);\r\n        this.$watch('skillsChartType', this.updateCharts);\r\n        this.$watch('objectivesChartType', this.updateCharts);\r\n        this.$watch('activitiesChartType', this.updateCharts);\r\n        this.$watch('activeMainTab', this.updateCharts);\r\n      }\r\n    },\r\n    mounted() {\r\n      // Register chart.js\r\n      Chart.register(...registerables);\r\n      \r\n      // Load user data\r\n      this.loadData();\r\n      \r\n      // Watch for chart type changes\r\n      this.watchChartTypeChange();\r\n      \r\n      // Check for saved theme preference\r\n      const savedDarkMode = localStorage.getItem('darkMode');\r\n      if (savedDarkMode !== null) {\r\n        this.darkMode = savedDarkMode === 'true';\r\n      } else {\r\n        // Default to system preference\r\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n        this.darkMode = prefersDark;\r\n      }\r\n      \r\n      // Listen for system theme changes\r\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\r\n        if (localStorage.getItem('darkMode') === null) {\r\n          this.darkMode = e.matches;\r\n        }\r\n      });\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\nbody{\r\n  padding:2px;\r\n}\r\n.return-to-dash {\r\n  font-size: 0.9rem;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  margin-top: 0.25rem;\r\n  transition: all 0.2s ease;\r\n}\r\n.timeline-dashboard {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  background-color: #f8fafc;\r\n  color: #1e293b;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.timeline-dashboard.dark-mode {\r\n  background-color: #1e293b;\r\n  color: #e5e7eb;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.dashboard-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.logo-container {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 300px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n\r\n.logo-container img {\r\n  height: 300px;\r\n  width:300px;\r\n  object-fit: contain;\r\n}\r\n\r\n.dashboard-header h1 {\r\n  margin: .5rem 0;\r\n  color: #2563eb;\r\n  font-size: 1.8rem;\r\n}\r\n\r\n.dark-mode .dashboard-header h1 {\r\n  color: #60a5fa;\r\n}\r\n\r\n.dashboard-header p {\r\n  color: #64748b;\r\n  margin-top: 0;\r\n}\r\n\r\n.dark-mode .dashboard-header p {\r\n  color: #94a3b8;\r\n}\r\n\r\n.main-tabs {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.main-tabs button {\r\n  padding: 10px 20px;\r\n  background-color: #e5e7eb;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #1e293b;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.dark-mode .main-tabs button {\r\n  background-color: #334155;\r\n  color: #e5e7eb;\r\n}\r\n\r\n.main-tabs button.active {\r\n  background-color: #2563eb;\r\n  color: white;\r\n}\r\n\r\n.dark-mode .main-tabs button.active {\r\n  background-color: #3b82f6;\r\n}\r\n\r\n.section-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.chart-selector h2 {\r\n  margin: 0;\r\n  color: #334155;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.dark-mode .chart-selector h2 {\r\n  color: #cbd5e1;\r\n}\r\n\r\n.chart-type-selector {\r\n  padding: 8px 12px;\r\n  border-radius: 5px;\r\n  border: 1px solid #e2e8f0;\r\n  background-color: white;\r\n  color: #1e293b;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.dark-mode .chart-type-selector {\r\n  background-color: #334155;\r\n  border-color: #475569;\r\n  color: #e5e7eb;\r\n}\r\n\r\n.chart-container {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.dark-mode .chart-container {\r\n  background-color: #334155;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.chart-container h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  color: #334155;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.dark-mode .chart-container h3 {\r\n  color: #e5e7eb;\r\n}\r\n\r\n.chart-wrapper {\r\n  position: relative;\r\n  max-height: 1100px;\r\n  margin: 0 auto;\r\n\r\n}\r\n\r\n.progress-bars {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.progress-bar-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.project-info, .skill-info, .objective-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.project-name, .skill-name, .objective-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.project-status, .skill-category, .objective-status {\r\n  font-size: 0.9rem;\r\n  color: #64748b;\r\n}\r\n\r\n.dark-mode .project-status, \r\n.dark-mode .skill-category, \r\n.dark-mode .objective-status {\r\n  color: #94a3b8;\r\n}\r\n\r\n.progress-container {\r\n  height: 10px;\r\n  background-color: #e5e7eb;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.dark-mode .progress-container {\r\n  background-color: #475569;\r\n}\r\n\r\n.progress-bar {\r\n  height: 100%;\r\n  background-color: #2563eb;\r\n  border-radius: 5px;\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.progress-bar.planning {\r\n  background-color: #f39c12;\r\n}\r\n\r\n.progress-bar.in-progress {\r\n  background-color: #3498db;\r\n}\r\n\r\n.progress-bar.completed {\r\n  background-color: #2ecc71;\r\n}\r\n\r\n.progress-bar.on-hold {\r\n  background-color: #95a5a6;\r\n}\r\n\r\n.progress-bar.not-started {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.progress-percent {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: -15px;\r\n  font-size: 0.8rem;\r\n  color: #64748b;\r\n}\r\n\r\n.dark-mode .progress-percent {\r\n  color: #94a3b8;\r\n}\r\n\r\n.timeline-wrapper {\r\n  position: relative;\r\n  height: 200px;\r\n  margin: 30px 0;\r\n  padding-top: 20px;\r\n}\r\n\r\n.timeline-line {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  height: 2px;\r\n  background-color: #e5e7eb;\r\n  z-index: 1;\r\n}\r\n\r\n.dark-mode .timeline-line {\r\n  background-color: #475569;\r\n}\r\n\r\n.timeline-item {\r\n  position: absolute;\r\n  transform: translateX(-50%);\r\n  z-index: 2;\r\n}\r\n\r\n.timeline-dot {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: #2563eb;\r\n  margin: 0 auto;\r\n}\r\n\r\n.timeline-item.planning .timeline-dot {\r\n  background-color: #f39c12;\r\n}\r\n\r\n.timeline-item.in-progress .timeline-dot {\r\n  background-color: #3498db;\r\n}\r\n\r\n.timeline-item.completed .timeline-dot {\r\n  background-color: #2ecc71;\r\n}\r\n\r\n.timeline-item.on-hold .timeline-dot {\r\n  background-color: #95a5a6;\r\n}\r\n\r\n.timeline-item.not-started .timeline-dot {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.timeline-content {\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  padding: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 150px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.dark-mode .timeline-content {\r\n  background-color: #334155;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.timeline-date {\r\n  font-size: 0.8rem;\r\n  color: #64748b;\r\n}\r\n\r\n.dark-mode .timeline-date {\r\n  color: #94a3b8;\r\n}\r\n\r\n.timeline-title {\r\n  font-weight: 500;\r\n  margin: 3px 0;\r\n  font-size: 0.9rem;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.timeline-progress {\r\n  height: 5px;\r\n  background-color: #e5e7eb;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n}\r\n\r\n.dark-mode .timeline-progress {\r\n  background-color: #475569;\r\n}\r\n\r\n.time-range-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  margin-bottom: 20px;\r\n  gap: 10px;\r\n}\r\n\r\n.time-range-selector label {\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.time-range-selector select {\r\n  padding: 6px 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #e2e8f0;\r\n  background-color: white;\r\n  color: #1e293b;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.dark-mode .time-range-selector select {\r\n  background-color: #334155;\r\n  border-color: #475569;\r\n  color: #e5e7eb;\r\n}\r\n\r\n.theme-toggle-container {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n.theme-toggle {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 12px;\r\n  background-color: #e5e7eb;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: #1e293b;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.dark-mode .theme-toggle {\r\n  background-color: #334155;\r\n  color: #e5e7eb;\r\n}\r\n\r\n.theme-toggle:hover {\r\n  background-color: #d1d5db;\r\n}\r\n\r\n.dark-mode .theme-toggle:hover {\r\n  background-color: #475569;\r\n}\r\n\r\n.calendar-heatmap {\r\n  height: 200px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f1f5f9;\r\n  border-radius: 5px;\r\n}\r\n\r\n.dark-mode .calendar-heatmap {\r\n  background-color: #1e293b;\r\n}\r\n\r\n.heatmap-placeholder {\r\n  text-align: center;\r\n  color: #64748b;\r\n}\r\n\r\n.dark-mode .heatmap-placeholder {\r\n  color: #94a3b8;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .chart-selector {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .time-range-selector {\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .chart-wrapper {\r\n    max-height: 300px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .main-tabs {\r\n    flex-direction: column;\r\n    gap: 5px;\r\n  }\r\n  \r\n  .main-tabs button {\r\n    width: 100%;\r\n    padding: 8px;\r\n  }\r\n  \r\n  .chart-container {\r\n    padding: 10px;\r\n  }\r\n  \r\n  .timeline-wrapper {\r\n    height: 250px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}