{"ast":null,"code":"import _readOnlyError from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";\nimport _toConsumableArray from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/workspaces/JAVASCRIPT-S4/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.trim-end.js\";\nimport \"core-js/modules/es.string.trim-start.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * marked v15.0.11 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\nvar noopTest = {\n  exec: function exec() {\n    return null;\n  }\n};\nfunction edit(regex) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var source = typeof regex === 'string' ? regex : regex.source;\n  var obj = {\n    replace: function replace(name, val) {\n      var valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDDC0-\\uDDF3\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDD40-\\uDD65\\uDD6F-\\uDD85\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDEC2-\\uDEC4\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61\\uDF80-\\uDF89\\uDF8B\\uDF8E\\uDF90-\\uDFB5\\uDFB7\\uDFD1\\uDFD3]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDED0-\\uDEE3\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8\\uDFC0-\\uDFE0\\uDFF0-\\uDFF9]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD80E\\uD80F\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46\\uDC60-\\uDFFF]|\\uD810[\\uDC00-\\uDFFA]|\\uD811[\\uDC00-\\uDE46]|\\uD818[\\uDD00-\\uDD1D\\uDD30-\\uDD39]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDD40-\\uDD6C\\uDD70-\\uDD79\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDCFF-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD833[\\uDCF0-\\uDCF9]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDDD0-\\uDDED\\uDDF0-\\uDDFA\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: function listItemRegex(bull) {\n    return new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n  },\n  nextBulletRegex: function nextBulletRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n  },\n  hrRegex: function hrRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n  },\n  fencesBeginRegex: function fencesBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n  },\n  headingBeginRegex: function headingBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n  },\n  htmlBeginRegex: function htmlBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}<(?:[a-z].*>|!--)\"), 'i');\n  }\n};\n/**\n * Block-Level Grammar\n */\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n.replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n.replace(/\\|table/g, '') // table not in commonmark\n.getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n.replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n.replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n.getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit('^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\nvar blockNormal = {\n  blockquote: blockquote,\n  code: blockCode,\n  def: def,\n  fences: fences,\n  heading: heading,\n  hr: hr,\n  html: html,\n  lheading: lheading,\n  list: list,\n  newline: newline,\n  paragraph: paragraph,\n  table: noopTest,\n  text: blockText\n};\n/**\n * GFM Block Grammar\n */\nvar gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n.replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nvar blockGfm = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('table', gfmTable) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex()\n});\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nvar blockPedantic = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\nvar escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nvar _punctuation = /(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpace = /(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpace = /(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar punctuation = edit(/^((?![*_])punctSpace)/, 'u').replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nvar _punctuationGfmStrongEm = /(?!~)(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|~)/;\n// sequences em should skip over [title](link), `code`, <html>\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n// (6) Not allowed for _\nvar emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n.replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, 'gu').replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nvar tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n+ '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n+ '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n+ '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n+ '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n.replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\nvar reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation: anyPunctuation,\n  autolink: autolink,\n  blockSkip: blockSkip,\n  br: br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim: emStrongLDelim,\n  emStrongRDelimAst: emStrongRDelimAst,\n  emStrongRDelimUnd: emStrongRDelimUnd,\n  escape: escape$1,\n  link: link,\n  nolink: nolink,\n  punctuation: punctuation,\n  reflink: reflink,\n  reflinkSearch: reflinkSearch,\n  tag: tag,\n  text: inlineText,\n  url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nvar inlinePedantic = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\nvar inlineGfm = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\nvar inlineBreaks = _objectSpread(_objectSpread({}, inlineGfm), {}, {\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * exports\n */\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n/**\n * Helpers\n */\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction escape(html, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch (_unused) {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  var _cells$at;\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(other.findPipe, function (match, offset, str) {\n      var escaped = false;\n      var curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  var i = 0;\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !((_cells$at = cells.at(-1)) !== null && _cells$at !== void 0 && _cells$at.trim())) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && true) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n  return -1;\n}\nfunction outputLink(cap, link, raw, lexer, rules) {\n  var href = link.href;\n  var title = link.title || null;\n  var text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n  lexer.state.inLink = true;\n  var token = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw: raw,\n    href: href,\n    title: title,\n    text: text,\n    tokens: lexer.inlineTokens(text)\n  };\n  lexer.state.inLink = false;\n  return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  var matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\nvar _Tokenizer = /*#__PURE__*/function () {\n  // set by the lexer\n  function _Tokenizer(options) {\n    _classCallCheck(this, _Tokenizer);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"rules\", void 0);\n    // set by the lexer\n    _defineProperty(this, \"lexer\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n        // remove trailing #s\n        if (this.rules.other.endingHash.test(text)) {\n          var trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: rtrim(cap[0], '\\n')\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var lines = rtrim(cap[0], '\\n').split('\\n');\n        var raw = '';\n        var text = '';\n        var tokens = [];\n        while (lines.length > 0) {\n          var inBlockquote = false;\n          var currentLines = [];\n          var i = void 0;\n          for (i = 0; i < lines.length; i++) {\n            // get lines up to a continuation\n            if (this.rules.other.blockquoteStart.test(lines[i])) {\n              currentLines.push(lines[i]);\n              inBlockquote = true;\n            } else if (!inBlockquote) {\n              currentLines.push(lines[i]);\n            } else {\n              break;\n            }\n          }\n          lines = lines.slice(i);\n          var currentRaw = currentLines.join('\\n');\n          var currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1').replace(this.rules.other.blockquoteSetextReplace2, '');\n          raw = raw ? \"\".concat(raw, \"\\n\").concat(currentRaw) : currentRaw;\n          text = text ? \"\".concat(text, \"\\n\").concat(currentText) : currentText;\n          // parse blockquote lines as top level tokens\n          // merge paragraphs if this is a continuation\n          var top = this.lexer.state.top;\n          this.lexer.state.top = true;\n          this.lexer.blockTokens(currentText, tokens, true);\n          this.lexer.state.top = top;\n          // if there is no continuation then we are done\n          if (lines.length === 0) {\n            break;\n          }\n          var lastToken = tokens.at(-1);\n          if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'code') {\n            // blockquote continuation cannot be preceded by a code block\n            break;\n          } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'blockquote') {\n            // include continuation in nested blockquote\n            var oldToken = lastToken;\n            var newText = oldToken.raw + '\\n' + lines.join('\\n');\n            var newToken = this.blockquote(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n            break;\n          } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'list') {\n            // include continuation in nested list\n            var _oldToken = lastToken;\n            var _newText = _oldToken.raw + '\\n' + lines.join('\\n');\n            var _newToken = this.list(_newText);\n            tokens[tokens.length - 1] = _newToken;\n            raw = raw.substring(0, raw.length - lastToken.raw.length) + _newToken.raw;\n            text = text.substring(0, text.length - _oldToken.raw.length) + _newToken.raw;\n            lines = _newText.substring(tokens.at(-1).raw.length).split('\\n');\n            continue;\n          }\n        }\n        return {\n          type: 'blockquote',\n          raw: raw,\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var _this = this;\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var _list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n        // Get next list item\n        var itemRegex = this.rules.other.listItemRegex(bull);\n        var endsWithBlankLine = false;\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          var endEarly = false;\n          var raw = '';\n          var itemContents = '';\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          var line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, function (t) {\n            return ' '.repeat(3 * t.length);\n          });\n          var nextLine = src.split('\\n', 1)[0];\n          var blankLine = !line.trim();\n          var indent = 0;\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimStart();\n          } else if (blankLine) {\n            indent = cap[1].length + 1;\n          } else {\n            indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n            var hrRegex = this.rules.other.hrRegex(indent);\n            var fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n            var headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n            var htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n            // Check if following lines should be included in List Item\n            while (src) {\n              var rawLine = src.split('\\n', 1)[0];\n              var nextLineWithoutTabs = void 0;\n              nextLine = rawLine;\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                nextLineWithoutTabs = nextLine;\n              } else {\n                nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n              }\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of html block\n              if (htmlBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              // Horizontal rule found\n              if (hrRegex.test(nextLine)) {\n                break;\n              }\n              if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n                // paragraph continuation unless last line was a different block level element\n                if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLineWithoutTabs.slice(indent);\n            }\n          }\n          if (!_list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              _list.loose = true;\n            } else if (this.rules.other.doubleBlankLine.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          var istask = null;\n          var ischecked = void 0;\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = this.rules.other.listIsTask.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n            }\n          }\n          _list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents,\n            tokens: []\n          });\n          _list.raw += raw;\n        }\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        var lastItem = _list.items.at(-1);\n        if (lastItem) {\n          lastItem.raw = lastItem.raw.trimEnd();\n          lastItem.text = lastItem.text.trimEnd();\n        } else {\n          // not a list since there were no items\n          return;\n        }\n        _list.raw = _list.raw.trimEnd();\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (var i = 0; i < _list.items.length; i++) {\n          this.lexer.state.top = false;\n          _list.items[i].tokens = this.lexer.blockTokens(_list.items[i].text, []);\n          if (!_list.loose) {\n            // Check if list should be loose\n            var spacers = _list.items[i].tokens.filter(function (t) {\n              return t.type === 'space';\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return _this.rules.other.anyLine.test(t.raw);\n            });\n            _list.loose = hasMultipleLineBreaks;\n          }\n        }\n        // Set all items to loose if list is loose\n        if (_list.loose) {\n          for (var _i = 0; _i < _list.items.length; _i++) {\n            _list.items[_i].loose = true;\n          }\n        }\n        return _list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        };\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var _tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n        var href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag: _tag2,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var _cap$,\n        _this2 = this;\n      var cap = this.rules.block.table.exec(src);\n      if (!cap) {\n        return;\n      }\n      if (!this.rules.other.tableDelimiter.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n      var headers = splitCells(cap[1]);\n      var aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n      var rows = (_cap$ = cap[3]) !== null && _cap$ !== void 0 && _cap$.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n      var item = {\n        type: 'table',\n        raw: cap[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n      if (headers.length !== aligns.length) {\n        // header and align columns must be equal, rows can be different.\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(aligns),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var align = _step.value;\n          if (this.rules.other.tableAlignRight.test(align)) {\n            item.align.push('right');\n          } else if (this.rules.other.tableAlignCenter.test(align)) {\n            item.align.push('center');\n          } else if (this.rules.other.tableAlignLeft.test(align)) {\n            item.align.push('left');\n          } else {\n            item.align.push(null);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      for (var i = 0; i < headers.length; i++) {\n        item.header.push({\n          text: headers[i],\n          tokens: this.lexer.inline(headers[i]),\n          header: true,\n          align: item.align[i]\n        });\n      }\n      var _iterator2 = _createForOfIteratorHelper(rows),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n          item.rows.push(splitCells(row, item.header.length).map(function (cell, i) {\n            return {\n              text: cell,\n              tokens: _this2.lexer.inline(cell),\n              header: false,\n              align: item.align[i]\n            };\n          }));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return item;\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: cap[1]\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            return;\n          }\n          // ending angle bracket cannot be escaped\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex === -2) {\n            // more open parens than closed\n            return;\n          }\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var _link = this.rules.other.pedanticHrefTitle.exec(href);\n          if (_link) {\n            href = _link[1];\n            title = _link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (this.rules.other.startAngleBracket.test(href)) {\n          if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n          title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n        }, cap[0], this.lexer, this.rules);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n        var _link2 = links[linkString.toLowerCase()];\n        if (!_link2) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, _link2, cap[0], this.lexer, this.rules);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrongLDelim.exec(src);\n      if (!match) return;\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n      var nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n        var lLength = _toConsumableArray(match[0]).length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n        endReg.lastIndex = 0;\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n          rLength = _toConsumableArray(rDelim).length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          // char length can be >1 for unicode characters;\n          var lastCharLength = _toConsumableArray(match[0])[0].length;\n          var raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw: raw,\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text)\n            };\n          }\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          var text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n        var hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n        var hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = cap[1];\n          href = 'mailto:' + text;\n        } else {\n          text = cap[1];\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = cap[0];\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            var _this$rules$inline$_b, _this$rules$inline$_b2;\n            prevCapZero = cap[0];\n            cap[0] = (_this$rules$inline$_b = (_this$rules$inline$_b2 = this.rules.inline._backpedal.exec(cap[0])) === null || _this$rules$inline$_b2 === void 0 ? void 0 : _this$rules$inline$_b2[0]) !== null && _this$rules$inline$_b !== void 0 ? _this$rules$inline$_b : '';\n          } while (prevCapZero !== cap[0]);\n          text = cap[0];\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var escaped = this.lexer.state.inRawBlock;\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          escaped: escaped\n        };\n      }\n    }\n  }]);\n}();\n/**\n * Block Lexer\n */\nvar _Lexer = /*#__PURE__*/function () {\n  function _Lexer(options) {\n    _classCallCheck(this, _Lexer);\n    _defineProperty(this, \"tokens\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenizer\", void 0);\n    _defineProperty(this, \"inlineQueue\", void 0);\n    // TokenList cannot be created in one go\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      other: other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  return _createClass(_Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(other.carriageReturn, '\\n');\n      this.blockTokens(src, this.tokens);\n      for (var i = 0; i < this.inlineQueue.length; i++) {\n        var next = this.inlineQueue[i];\n        this.inlineTokens(next.src, next.tokens);\n      }\n      this.inlineQueue = [];\n      return this.tokens;\n    }\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this3 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var lastParagraphClipped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (this.options.pedantic) {\n        src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n      }\n      var _loop = function _loop() {\n          var _this3$options$extens, _this3$options$extens2;\n          var token;\n          if ((_this3$options$extens = _this3.options.extensions) !== null && _this3$options$extens !== void 0 && (_this3$options$extens = _this3$options$extens.block) !== null && _this3$options$extens !== void 0 && _this3$options$extens.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this3\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // newline\n          if (token = _this3.tokenizer.space(src)) {\n            src = src.substring(token.raw.length);\n            var lastToken = tokens.at(-1);\n            if (token.raw.length === 1 && lastToken !== undefined) {\n              // if there's a single \\n as a spacer, it's terminating the last line,\n              // so move it there so that we don't get unnecessary paragraph tags\n              lastToken.raw += '\\n';\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // code\n          if (token = _this3.tokenizer.code(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken = tokens.at(-1);\n            // An indented code block cannot interrupt a paragraph.\n            if ((_lastToken === null || _lastToken === void 0 ? void 0 : _lastToken.type) === 'paragraph' || (_lastToken === null || _lastToken === void 0 ? void 0 : _lastToken.type) === 'text') {\n              _lastToken.raw += '\\n' + token.raw;\n              _lastToken.text += '\\n' + token.text;\n              _this3.inlineQueue.at(-1).src = _lastToken.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // fences\n          if (token = _this3.tokenizer.fences(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // heading\n          if (token = _this3.tokenizer.heading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // hr\n          if (token = _this3.tokenizer.hr(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // blockquote\n          if (token = _this3.tokenizer.blockquote(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // list\n          if (token = _this3.tokenizer.list(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // html\n          if (token = _this3.tokenizer.html(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // def\n          if (token = _this3.tokenizer.def(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken2 = tokens.at(-1);\n            if ((_lastToken2 === null || _lastToken2 === void 0 ? void 0 : _lastToken2.type) === 'paragraph' || (_lastToken2 === null || _lastToken2 === void 0 ? void 0 : _lastToken2.type) === 'text') {\n              _lastToken2.raw += '\\n' + token.raw;\n              _lastToken2.text += '\\n' + token.raw;\n              _this3.inlineQueue.at(-1).src = _lastToken2.text;\n            } else if (!_this3.tokens.links[token.tag]) {\n              _this3.tokens.links[token.tag] = {\n                href: token.href,\n                title: token.title\n              };\n            }\n            return 0; // continue\n          }\n          // table (gfm)\n          if (token = _this3.tokenizer.table(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // lheading\n          if (token = _this3.tokenizer.lheading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // top-level paragraph\n          // prevent paragraph consuming extensions by clipping 'src' to extension start\n          var cutSrc = src;\n          if ((_this3$options$extens2 = _this3.options.extensions) !== null && _this3$options$extens2 !== void 0 && _this3$options$extens2.startBlock) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this3.options.extensions.startBlock.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this3\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (_this3.state.top && (token = _this3.tokenizer.paragraph(cutSrc))) {\n            var _lastToken3 = tokens.at(-1);\n            if (lastParagraphClipped && (_lastToken3 === null || _lastToken3 === void 0 ? void 0 : _lastToken3.type) === 'paragraph') {\n              _lastToken3.raw += '\\n' + token.raw;\n              _lastToken3.text += '\\n' + token.text;\n              _this3.inlineQueue.pop();\n              _this3.inlineQueue.at(-1).src = _lastToken3.text;\n            } else {\n              tokens.push(token);\n            }\n            lastParagraphClipped = cutSrc.length !== src.length;\n            src = src.substring(token.raw.length);\n            return 0; // continue\n          }\n          // text\n          if (token = _this3.tokenizer.text(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken4 = tokens.at(-1);\n            if ((_lastToken4 === null || _lastToken4 === void 0 ? void 0 : _lastToken4.type) === 'text') {\n              _lastToken4.raw += '\\n' + token.raw;\n              _lastToken4.text += '\\n' + token.text;\n              _this3.inlineQueue.pop();\n              _this3.inlineQueue.at(-1).src = _lastToken4.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this3.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret;\n      while (src) {\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret === 1) break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this4 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      // String with links masked to avoid interference with em and strong\n      var maskedSrc = src;\n      var match = null;\n      // Mask out reflinks\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      var keepPrevChar = false;\n      var prevChar = '';\n      var _loop2 = function _loop2() {\n          var _this4$options$extens, _this4$options$extens2;\n          if (!keepPrevChar) {\n            prevChar = '';\n          }\n          keepPrevChar = false;\n          var token;\n          // extensions\n          if ((_this4$options$extens = _this4.options.extensions) !== null && _this4$options$extens !== void 0 && (_this4$options$extens = _this4$options$extens.inline) !== null && _this4$options$extens !== void 0 && _this4$options$extens.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this4\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // escape\n          if (token = _this4.tokenizer.escape(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // tag\n          if (token = _this4.tokenizer.tag(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // link\n          if (token = _this4.tokenizer.link(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // reflink, nolink\n          if (token = _this4.tokenizer.reflink(src, _this4.tokens.links)) {\n            src = src.substring(token.raw.length);\n            var lastToken = tokens.at(-1);\n            if (token.type === 'text' && (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'text') {\n              lastToken.raw += token.raw;\n              lastToken.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // em & strong\n          if (token = _this4.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // code\n          if (token = _this4.tokenizer.codespan(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // br\n          if (token = _this4.tokenizer.br(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // del (gfm)\n          if (token = _this4.tokenizer.del(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // autolink\n          if (token = _this4.tokenizer.autolink(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // url (gfm)\n          if (!_this4.state.inLink && (token = _this4.tokenizer.url(src))) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // text\n          // prevent inlineText consuming extensions by clipping 'src' to extension start\n          var cutSrc = src;\n          if ((_this4$options$extens2 = _this4.options.extensions) !== null && _this4$options$extens2 !== void 0 && _this4$options$extens2.startInline) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this4.options.extensions.startInline.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this4\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (token = _this4.tokenizer.inlineText(cutSrc)) {\n            src = src.substring(token.raw.length);\n            if (token.raw.slice(-1) !== '_') {\n              // Track prevChar before string of ____ started\n              prevChar = token.raw.slice(-1);\n            }\n            keepPrevChar = true;\n            var _lastToken5 = tokens.at(-1);\n            if ((_lastToken5 === null || _lastToken5 === void 0 ? void 0 : _lastToken5.type) === 'text') {\n              _lastToken5.raw += token.raw;\n              _lastToken5.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this4.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret2;\n      while (src) {\n        _ret2 = _loop2();\n        if (_ret2 === 0) continue;\n        if (_ret2 === 1) break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n}();\n/**\n * Renderer\n */\nvar _Renderer = /*#__PURE__*/function () {\n  // set by the parser\n  function _Renderer(options) {\n    _classCallCheck(this, _Renderer);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"parser\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Renderer, [{\n    key: \"space\",\n    value: function space(token) {\n      return '';\n    }\n  }, {\n    key: \"code\",\n    value: function code(_ref) {\n      var _match;\n      var text = _ref.text,\n        lang = _ref.lang,\n        escaped = _ref.escaped;\n      var langString = (_match = (lang || '').match(other.notSpaceStart)) === null || _match === void 0 ? void 0 : _match[0];\n      var code = text.replace(other.endingNewline, '') + '\\n';\n      if (!langString) {\n        return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"language-' + escape(langString) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(_ref2) {\n      var tokens = _ref2.tokens;\n      var body = this.parser.parse(tokens);\n      return \"<blockquote>\\n\".concat(body, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_ref3) {\n      var text = _ref3.text;\n      return text;\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(_ref4) {\n      var tokens = _ref4.tokens,\n        depth = _ref4.depth;\n      return \"<h\".concat(depth, \">\").concat(this.parser.parseInline(tokens), \"</h\").concat(depth, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(token) {\n      return '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(token) {\n      var ordered = token.ordered;\n      var start = token.start;\n      var body = '';\n      for (var j = 0; j < token.items.length; j++) {\n        var item = token.items[j];\n        body += this.listitem(item);\n      }\n      var type = ordered ? 'ol' : 'ul';\n      var startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n  }, {\n    key: \"listitem\",\n    value: function listitem(item) {\n      var itemBody = '';\n      if (item.task) {\n        var checkbox = this.checkbox({\n          checked: !!item.checked\n        });\n        if (item.loose) {\n          var _item$tokens$;\n          if (((_item$tokens$ = item.tokens[0]) === null || _item$tokens$ === void 0 ? void 0 : _item$tokens$.type) === 'paragraph') {\n            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n              item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n              item.tokens[0].tokens[0].escaped = true;\n            }\n          } else {\n            item.tokens.unshift({\n              type: 'text',\n              raw: checkbox + ' ',\n              text: checkbox + ' ',\n              escaped: true\n            });\n          }\n        } else {\n          itemBody += checkbox + ' ';\n        }\n      }\n      itemBody += this.parser.parse(item.tokens, !!item.loose);\n      return \"<li>\".concat(itemBody, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(_ref5) {\n      var checked = _ref5.checked;\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(_ref6) {\n      var tokens = _ref6.tokens;\n      return \"<p>\".concat(this.parser.parseInline(tokens), \"</p>\\n\");\n    }\n  }, {\n    key: \"table\",\n    value: function table(token) {\n      var header = '';\n      // header\n      var cell = '';\n      for (var j = 0; j < token.header.length; j++) {\n        cell += this.tablecell(token.header[j]);\n      }\n      header += this.tablerow({\n        text: cell\n      });\n      var body = '';\n      for (var _j = 0; _j < token.rows.length; _j++) {\n        var row = token.rows[_j];\n        cell = '';\n        for (var k = 0; k < row.length; k++) {\n          cell += this.tablecell(row[k]);\n        }\n        body += this.tablerow({\n          text: cell\n        });\n      }\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(_ref7) {\n      var text = _ref7.text;\n      return \"<tr>\\n\".concat(text, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(token) {\n      var content = this.parser.parseInline(token.tokens);\n      var type = token.header ? 'th' : 'td';\n      var tag = token.align ? \"<\".concat(type, \" align=\\\"\").concat(token.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n    /**\n     * span level renderer\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(_ref8) {\n      var tokens = _ref8.tokens;\n      return \"<strong>\".concat(this.parser.parseInline(tokens), \"</strong>\");\n    }\n  }, {\n    key: \"em\",\n    value: function em(_ref9) {\n      var tokens = _ref9.tokens;\n      return \"<em>\".concat(this.parser.parseInline(tokens), \"</em>\");\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(_ref10) {\n      var text = _ref10.text;\n      return \"<code>\".concat(escape(text, true), \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br(token) {\n      return '<br>';\n    }\n  }, {\n    key: \"del\",\n    value: function del(_ref11) {\n      var tokens = _ref11.tokens;\n      return \"<del>\".concat(this.parser.parseInline(tokens), \"</del>\");\n    }\n  }, {\n    key: \"link\",\n    value: function link(_ref12) {\n      var href = _ref12.href,\n        title = _ref12.title,\n        tokens = _ref12.tokens;\n      var text = this.parser.parseInline(tokens);\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + escape(title) + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n  }, {\n    key: \"image\",\n    value: function image(_ref13) {\n      var href = _ref13.href,\n        title = _ref13.title,\n        text = _ref13.text,\n        tokens = _ref13.tokens;\n      if (tokens) {\n        text = this.parser.parseInline(tokens, this.parser.textRenderer);\n      }\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return escape(text);\n      }\n      href = cleanHref;\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(escape(title), \"\\\"\");\n      }\n      out += '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(token) {\n      return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : 'escaped' in token && token.escaped ? token.text : escape(token.text);\n    }\n  }]);\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar _TextRenderer = /*#__PURE__*/function () {\n  function _TextRenderer() {\n    _classCallCheck(this, _TextRenderer);\n  }\n  return _createClass(_TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(_ref14) {\n      var text = _ref14.text;\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(_ref15) {\n      var text = _ref15.text;\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(_ref16) {\n      var text = _ref16.text;\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(_ref17) {\n      var text = _ref17.text;\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(_ref18) {\n      var text = _ref18.text;\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_ref19) {\n      var _text2 = _ref19.text;\n      return _text2;\n    }\n  }, {\n    key: \"link\",\n    value: function link(_ref20) {\n      var text = _ref20.text;\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(_ref21) {\n      var text = _ref21.text;\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n}();\n/**\n * Parsing & Compiling\n */\nvar _Parser = /*#__PURE__*/function () {\n  function _Parser(options) {\n    _classCallCheck(this, _Parser);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"textRenderer\", void 0);\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  return _createClass(_Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var _this$options$extensi;\n        var anyToken = tokens[i];\n        // Run any renderer extensions\n        if ((_this$options$extensi = this.options.extensions) !== null && _this$options$extensi !== void 0 && (_this$options$extensi = _this$options$extensi.renderers) !== null && _this$options$extensi !== void 0 && _this$options$extensi[anyToken.type]) {\n          var genericToken = anyToken;\n          var ret = this.options.extensions.renderers[genericToken.type].call({\n            parser: this\n          }, genericToken);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        var token = anyToken;\n        switch (token.type) {\n          case 'space':\n            {\n              out += this.renderer.space(token);\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr(token);\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(token);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token);\n              continue;\n            }\n          case 'table':\n            {\n              out += this.renderer.table(token);\n              continue;\n            }\n          case 'blockquote':\n            {\n              out += this.renderer.blockquote(token);\n              continue;\n            }\n          case 'list':\n            {\n              out += this.renderer.list(token);\n              continue;\n            }\n          case 'html':\n            {\n              out += this.renderer.html(token);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(token);\n              continue;\n            }\n          case 'text':\n            {\n              var textToken = token;\n              var body = this.renderer.text(textToken);\n              while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                textToken = tokens[++i];\n                body += '\\n' + this.renderer.text(textToken);\n              }\n              if (top) {\n                out += this.renderer.paragraph({\n                  type: 'paragraph',\n                  raw: body,\n                  text: body,\n                  tokens: [{\n                    type: 'text',\n                    raw: body,\n                    text: body,\n                    escaped: true\n                  }]\n                });\n              } else {\n                out += body;\n              }\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens) {\n      var renderer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var _this$options$extensi2;\n        var anyToken = tokens[i];\n        // Run any renderer extensions\n        if ((_this$options$extensi2 = this.options.extensions) !== null && _this$options$extensi2 !== void 0 && (_this$options$extensi2 = _this$options$extensi2.renderers) !== null && _this$options$extensi2 !== void 0 && _this$options$extensi2[anyToken.type]) {\n          var ret = this.options.extensions.renderers[anyToken.type].call({\n            parser: this\n          }, anyToken);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        var token = anyToken;\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token);\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(token);\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(token);\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br(token);\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(token);\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n}();\nvar _Hooks = /*#__PURE__*/function () {\n  function _Hooks(options) {\n    _classCallCheck(this, _Hooks);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"block\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Hooks, [{\n    key: \"preprocess\",\n    value:\n    /**\n     * Process markdown before marked\n     */\n    function preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(html) {\n      return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n  }, {\n    key: \"processAllTokens\",\n    value: function processAllTokens(tokens) {\n      return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n  }, {\n    key: \"provideLexer\",\n    value: function provideLexer() {\n      return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n  }, {\n    key: \"provideParser\",\n    value: function provideParser() {\n      return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n  }]);\n}();\n_defineProperty(_Hooks, \"passThroughHooks\", new Set(['preprocess', 'postprocess', 'processAllTokens']));\nvar Marked = /*#__PURE__*/function () {\n  function Marked() {\n    _classCallCheck(this, Marked);\n    _defineProperty(this, \"defaults\", _getDefaults());\n    _defineProperty(this, \"options\", this.setOptions);\n    _defineProperty(this, \"parse\", this.parseMarkdown(true));\n    _defineProperty(this, \"parseInline\", this.parseMarkdown(false));\n    _defineProperty(this, \"Parser\", _Parser);\n    _defineProperty(this, \"Renderer\", _Renderer);\n    _defineProperty(this, \"TextRenderer\", _TextRenderer);\n    _defineProperty(this, \"Lexer\", _Lexer);\n    _defineProperty(this, \"Tokenizer\", _Tokenizer);\n    _defineProperty(this, \"Hooks\", _Hooks);\n    this.use.apply(this, arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n  return _createClass(Marked, [{\n    key: \"walkTokens\",\n    value: function walkTokens(tokens, callback) {\n      var _this5 = this;\n      var values = [];\n      var _iterator3 = _createForOfIteratorHelper(tokens),\n        _step3;\n      try {\n        var _loop3 = function _loop3() {\n          var token = _step3.value;\n          values = values.concat(callback.call(_this5, token));\n          switch (token.type) {\n            case 'table':\n              {\n                var tableToken = token;\n                var _iterator4 = _createForOfIteratorHelper(tableToken.header),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var cell = _step4.value;\n                    values = values.concat(_this5.walkTokens(cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n                var _iterator5 = _createForOfIteratorHelper(tableToken.rows),\n                  _step5;\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var row = _step5.value;\n                    var _iterator6 = _createForOfIteratorHelper(row),\n                      _step6;\n                    try {\n                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                        var _cell = _step6.value;\n                        values = values.concat(_this5.walkTokens(_cell.tokens, callback));\n                      }\n                    } catch (err) {\n                      _iterator6.e(err);\n                    } finally {\n                      _iterator6.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n                break;\n              }\n            case 'list':\n              {\n                var listToken = token;\n                values = values.concat(_this5.walkTokens(listToken.items, callback));\n                break;\n              }\n            default:\n              {\n                var _this5$defaults$exten;\n                var genericToken = token;\n                if ((_this5$defaults$exten = _this5.defaults.extensions) !== null && _this5$defaults$exten !== void 0 && (_this5$defaults$exten = _this5$defaults$exten.childTokens) !== null && _this5$defaults$exten !== void 0 && _this5$defaults$exten[genericToken.type]) {\n                  _this5.defaults.extensions.childTokens[genericToken.type].forEach(function (childTokens) {\n                    var tokens = genericToken[childTokens].flat(Infinity);\n                    values = values.concat(_this5.walkTokens(tokens, callback));\n                  });\n                } else if (genericToken.tokens) {\n                  values = values.concat(_this5.walkTokens(genericToken.tokens, callback));\n                }\n              }\n          }\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"use\",\n    value: function use() {\n      var _this6 = this;\n      var extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (pack) {\n        // copy options to new object\n        var opts = _objectSpread({}, pack);\n        // set async to true if it was set to true before\n        opts.async = _this6.defaults.async || opts.async || false;\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(function (ext) {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if ('renderer' in ext) {\n              // Renderer extensions\n              var prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args[_key2] = arguments[_key2];\n                  }\n                  var ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if ('tokenizer' in ext) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              var extLevel = extensions[ext.level];\n              if (extLevel) {\n                extLevel.unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if ('childTokens' in ext && ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          var renderer = _this6.defaults.renderer || new _Renderer(_this6.defaults);\n          var _loop4 = function _loop4() {\n            if (!(prop in renderer)) {\n              throw new Error(\"renderer '\".concat(prop, \"' does not exist\"));\n            }\n            if (['options', 'parser'].includes(prop)) {\n              // ignore options property\n              return 1; // continue\n            }\n            var rendererProp = prop;\n            var rendererFunc = pack.renderer[rendererProp];\n            var prevRenderer = renderer[rendererProp];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[rendererProp] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              var ret = rendererFunc.apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret || '';\n            };\n          };\n          for (var prop in pack.renderer) {\n            if (_loop4()) continue;\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          var tokenizer = _this6.defaults.tokenizer || new _Tokenizer(_this6.defaults);\n          var _loop5 = function _loop5() {\n            if (!(_prop in tokenizer)) {\n              throw new Error(\"tokenizer '\".concat(_prop, \"' does not exist\"));\n            }\n            if (['options', 'rules', 'lexer'].includes(_prop)) {\n              // ignore options, rules, and lexer properties\n              return 1; // continue\n            }\n            var tokenizerProp = _prop;\n            var tokenizerFunc = pack.tokenizer[tokenizerProp];\n            var prevTokenizer = tokenizer[tokenizerProp];\n            // Replace tokenizer with func to run extension, but fall back if false\n            // @ts-expect-error cannot type tokenizer function dynamically\n            tokenizer[tokenizerProp] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n              var ret = tokenizerFunc.apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          };\n          for (var _prop in pack.tokenizer) {\n            if (_loop5()) continue;\n          }\n          opts.tokenizer = tokenizer;\n        }\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          var hooks = _this6.defaults.hooks || new _Hooks();\n          var _loop6 = function _loop6() {\n            if (!(_prop2 in hooks)) {\n              throw new Error(\"hook '\".concat(_prop2, \"' does not exist\"));\n            }\n            if (['options', 'block'].includes(_prop2)) {\n              // ignore options and block properties\n              return 1; // continue\n            }\n            var hooksProp = _prop2;\n            var hooksFunc = pack.hooks[hooksProp];\n            var prevHook = hooks[hooksProp];\n            if (_Hooks.passThroughHooks.has(_prop2)) {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function (arg) {\n                if (_this6.defaults.async) {\n                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(function (ret) {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                var ret = hooksFunc.call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                var ret = hooksFunc.apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          };\n          for (var _prop2 in pack.hooks) {\n            if (_loop6()) continue;\n          }\n          opts.hooks = hooks;\n        }\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          var _walkTokens = _this6.defaults.walkTokens;\n          var packWalktokens = pack.walkTokens;\n          opts.walkTokens = function (token) {\n            var values = [];\n            values.push(packWalktokens.call(this, token));\n            if (_walkTokens) {\n              values = values.concat(_walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        _this6.defaults = _objectSpread(_objectSpread({}, _this6.defaults), opts);\n      });\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opt) {\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), opt);\n      return this;\n    }\n  }, {\n    key: \"lexer\",\n    value: function lexer(src, options) {\n      return _Lexer.lex(src, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }, {\n    key: \"parser\",\n    value: function parser(tokens, options) {\n      return _Parser.parse(tokens, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }, {\n    key: \"parseMarkdown\",\n    value: function parseMarkdown(blockType) {\n      var _this7 = this;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var parse = function parse(src, options) {\n        var origOpt = _objectSpread({}, options);\n        var opt = _objectSpread(_objectSpread({}, _this7.defaults), origOpt);\n        var throwError = _this7.onError(!!opt.silent, !!opt.async);\n        // throw error if an extension set async to true but parse was called with async: false\n        if (_this7.defaults.async === true && origOpt.async === false) {\n          return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n        }\n        // throw error in case of non string input\n        if (typeof src === 'undefined' || src === null) {\n          return throwError(new Error('marked(): input parameter is undefined or null'));\n        }\n        if (typeof src !== 'string') {\n          return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n        }\n        if (opt.hooks) {\n          opt.hooks.options = opt;\n          opt.hooks.block = blockType;\n        }\n        var lexer = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n        var parser = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n        if (opt.async) {\n          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function (src) {\n            return lexer(src, opt);\n          }).then(function (tokens) {\n            return opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens;\n          }).then(function (tokens) {\n            return opt.walkTokens ? Promise.all(_this7.walkTokens(tokens, opt.walkTokens)).then(function () {\n              return tokens;\n            }) : tokens;\n          }).then(function (tokens) {\n            return parser(tokens, opt);\n          }).then(function (html) {\n            return opt.hooks ? opt.hooks.postprocess(html) : html;\n          })[\"catch\"](throwError);\n        }\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          var tokens = lexer(src, opt);\n          if (opt.hooks) {\n            tokens = opt.hooks.processAllTokens(tokens);\n          }\n          if (opt.walkTokens) {\n            _this7.walkTokens(tokens, opt.walkTokens);\n          }\n          var _html = parser(tokens, opt);\n          if (opt.hooks) {\n            _html = opt.hooks.postprocess(_html);\n          }\n          return _html;\n        } catch (e) {\n          return throwError(e);\n        }\n      };\n      return parse;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(silent, async) {\n      return function (e) {\n        e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n        if (silent) {\n          var msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n          if (async) {\n            return Promise.resolve(msg);\n          }\n          return msg;\n        }\n        if (async) {\n          return Promise.reject(e);\n        }\n        throw e;\n      };\n    }\n  }]);\n}();\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options = marked.setOptions = function (options) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function () {\n  markedInstance.use.apply(markedInstance, arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","arguments","length","undefined","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","concat","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","_objectSpread","blockPedantic","escape$1","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","escape","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","_unused","splitCells","tableRow","count","_cells$at","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","_matchIndentInNode","_slicedToArray","indentInNode","join","_Tokenizer","options","_classCallCheck","_defineProperty","_createClass","key","value","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","_this","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","istask","ischecked","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","_cap$","_this2","headers","aligns","rows","item","header","align","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","_toConsumableArray","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_this$rules$inline$_b","_this$rules$inline$_b2","_Lexer","Object","create","inlineQueue","lex","next","_this3","lastParagraphClipped","_loop","_this3$options$extens","_this3$options$extens2","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","_ret","_this4","keys","includes","lastIndexOf","keepPrevChar","_loop2","_this4$options$extens","_this4$options$extens2","startInline","_ret2","get","lexInline","_Renderer","_ref","_match","langString","_ref2","body","parser","parse","_ref3","_ref4","parseInline","j","listitem","startAttr","itemBody","checkbox","_item$tokens$","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","content","strong","_ref8","em","_ref9","_ref10","_ref11","_ref12","cleanHref","out","image","_ref13","textRenderer","_TextRenderer","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_Parser","_this$options$extensi","anyToken","renderers","genericToken","ret","textToken","_this$options$extensi2","_Hooks","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Set","Marked","setOptions","parseMarkdown","use","apply","callback","_this5","values","_iterator3","_step3","_loop3","tableToken","_iterator4","_step4","_iterator5","_step5","_iterator6","_step6","listToken","_this5$defaults$exten","defaults","childTokens","flat","_this6","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","extLevel","_loop4","prop","rendererProp","rendererFunc","_len3","_key3","_loop5","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","_loop6","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","_len5","_key5","packWalktokens","blockType","_this7","origOpt","throwError","onError","prototype","toString","all","message","msg","reject","markedInstance","marked","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sources":["../src/defaults.ts","../src/rules.ts","../src/helpers.ts","../src/Tokenizer.ts","../src/Lexer.ts","../src/Renderer.ts","../src/TextRenderer.ts","../src/Parser.ts","../src/Hooks.ts","../src/Instance.ts","../src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    if (level > 0) {\n        return -2;\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    lexer.state.inLink = true;\n    const token = {\n        type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text),\n    };\n    lexer.state.inLink = false;\n    return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex === -2) {\n                    // more open parens than closed\n                    return;\n                }\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text, tokens }) {\n        if (tokens) {\n            text = this.parser.parseInline(tokens, this.parser.textRenderer);\n        }\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}